/*°′″  «»  ≤≥  ≠≈  —¦  ÷×  !¡  ©®  £€  $¢  №⋕  λμ  πφ  ∑∏  ¶§  †‡  ±∞  √∆  ∫∳ 


__m64 == dwrd_t

typedef long long __m64; // _Alignas(8)
__attribute__((__vector_size__(8), __aligned__(8)));

typedef long long __v1di __attribute__((__vector_size__(8)));
typedef int __v2si __attribute__((__vector_size__(8)));
typedef short __v4hi __attribute__((__vector_size__(8)));
typedef char __v8qi __attribute__((__vector_size__(8)));

ecx leaf 1
#define bit_SSE3        0x00000001
#define bit_PCLMULQDQ   0x00000002
#define bit_PCLMUL      bit_PCLMULQDQ   


#define bit_DTES64      0x00000004
#define bit_MONITOR     0x00000008
#define bit_DSCPL       0x00000010
#define bit_VMX         0x00000020
#define bit_SMX         0x00000040
#define bit_EIST        0x00000080
#define bit_TM2         0x00000100
#define bit_SSSE3       0x00000200
#define bit_CNXTID      0x00000400
#define bit_FMA         0x00001000
#define bit_CMPXCHG16B  0x00002000
#define bit_xTPR        0x00004000
#define bit_PDCM        0x00008000
#define bit_PCID        0x00020000
#define bit_DCA         0x00040000
#define bit_SSE41       0x00080000
#define bit_SSE4_1      bit_SSE41       
#define bit_SSE42       0x00100000
#define bit_SSE4_2      bit_SSE42       
#define bit_x2APIC      0x00200000
#define bit_MOVBE       0x00400000
#define bit_POPCNT      0x00800000
#define bit_TSCDeadline 0x01000000
#define bit_AESNI       0x02000000
#define bit_AES         bit_AESNI       
#define bit_XSAVE       0x04000000
#define bit_OSXSAVE     0x08000000
#define bit_AVX         0x10000000
#define bit_F16C        0x20000000
#define bit_RDRND       0x40000000

%edx for leaf 1 

#define bit_FPU         0x00000001
#define bit_VME         0x00000002
#define bit_DE          0x00000004
#define bit_PSE         0x00000008
#define bit_TSC         0x00000010
#define bit_MSR         0x00000020
#define bit_PAE         0x00000040
#define bit_MCE         0x00000080
#define bit_CX8         0x00000100
#define bit_CMPXCHG8B   bit_CX8         
#define bit_APIC        0x00000200
#define bit_SEP         0x00000800
#define bit_MTRR        0x00001000
#define bit_PGE         0x00002000
#define bit_MCA         0x00004000
#define bit_CMOV        0x00008000
#define bit_PAT         0x00010000
#define bit_PSE36       0x00020000
#define bit_PSN         0x00040000
#define bit_CLFSH       0x00080000
#define bit_DS          0x00200000
#define bit_ACPI        0x00400000
#define bit_MMX         0x00800000
#define bit_FXSR        0x01000000
#define bit_FXSAVE      bit_FXSR        
#define bit_SSE         0x02000000
#define bit_SSE2        0x04000000
#define bit_SS          0x08000000
#define bit_HTT         0x10000000
#define bit_TM          0x20000000
#define bit_PBE         0x80000000

%ebx for leaf 7 sub-leaf 0

#define bit_FSGSBASE    0x00000001
#define bit_SGX         0x00000004
#define bit_BMI         0x00000008
#define bit_HLE         0x00000010
#define bit_AVX2        0x00000020
#define bit_SMEP        0x00000080
#define bit_BMI2        0x00000100
#define bit_ENH_MOVSB   0x00000200
#define bit_INVPCID     0x00000400
#define bit_RTM         0x00000800
#define bit_MPX         0x00004000
#define bit_AVX512F     0x00010000
#define bit_AVX512DQ    0x00020000
#define bit_RDSEED      0x00040000
#define bit_ADX         0x00080000
#define bit_AVX512IFMA  0x00200000
#define bit_CLFLUSHOPT  0x00800000
#define bit_CLWB        0x01000000
#define bit_AVX512PF    0x04000000
#define bit_AVX512ER    0x08000000
#define bit_AVX512CD    0x10000000
#define bit_SHA         0x20000000
#define bit_AVX512BW    0x40000000
#define bit_AVX512VL    0x80000000


%ecx for leaf 7 sub-leaf 0
#define bit_PREFTCHWT1       0x00000001
#define bit_AVX512VBMI       0x00000002
#define bit_PKU              0x00000004
#define bit_OSPKE            0x00000010
#define bit_WAITPKG          0x00000020
#define bit_AVX512VBMI2      0x00000040
#define bit_SHSTK            0x00000080
#define bit_GFNI             0x00000100
#define bit_VAES             0x00000200
#define bit_VPCLMULQDQ       0x00000400
#define bit_AVX512VNNI       0x00000800
#define bit_AVX512BITALG     0x00001000
#define bit_AVX512VPOPCNTDQ  0x00004000
#define bit_RDPID            0x00400000
#define bit_CLDEMOTE         0x02000000
#define bit_MOVDIRI          0x08000000
#define bit_MOVDIR64B        0x10000000
#define bit_ENQCMD           0x20000000

%edx for leaf 7 sub-leaf 0 
#define bit_AVX5124VNNIW  0x00000004
#define bit_AVX5124FMAPS  0x00000008
#define bit_UINTR         0x00000020
#define bit_SERIALIZE     0x00004000
#define bit_TSXLDTRK      0x00010000
#define bit_PCONFIG       0x00040000
#define bit_IBT           0x00100000
#define bit_AMXBF16       0x00400000
#define bit_AVX512FP16    0x00800000
#define bit_AMXTILE       0x01000000
#define bit_AMXINT8       0x02000000

%eax for leaf 7 sub-leaf 1 
#define bit_AVXVNNI       0x00000010
#define bit_AVX512BF16    0x00000020
#define bit_HRESET        0x00400000

%eax for leaf 13 sub-leaf 1 
#define bit_XSAVEOPT    0x00000001
#define bit_XSAVEC      0x00000002
#define bit_XSAVES      0x00000008

%eax for leaf 0x14 sub-leaf 0 
#define bit_PTWRITE     0x00000010

%ecx for leaf 0x80000001 
#define bit_LAHF_LM     0x00000001
#define bit_ABM         0x00000020
#define bit_LZCNT       bit_ABM        
#define bit_SSE4a       0x00000040
#define bit_PRFCHW      0x00000100
#define bit_XOP         0x00000800
#define bit_LWP         0x00008000
#define bit_FMA4        0x00010000
#define bit_TBM         0x00200000
#define bit_MWAITX      0x20000000

%edx for leaf 0x80000001 
#define bit_MMXEXT      0x00400000
#define bit_LM          0x20000000
#define bit_3DNOWP      0x40000000
#define bit_3DNOW       0x80000000
l0

%ebx for leaf 0x80000008 
#define bit_CLZERO      0x00000001
#define bit_WBNOINVD    0x00000200

*/

#include <xsaveoptintrin.h>  // __XSAVEOPT__
#include <xsavecintrin.h>  // __XSAVEC__
#include <xsavesintrin.h>  // __XSAVES__
#include <cetintrin.h>  // __SHSTK__
#include <rdseedintrin.h>  // __RDSEED__
#include <wbnoinvdintrin.h>  // __WBNOINVD__
#include <cldemoteintrin.h>  // __CLDEMOTE__
#include <waitpkgintrin.h>  // __WAITPKG__


#include <pconfigintrin.h>  // __PCONFIG__
#include <sgxintrin.h>  // __SGX__
#include <ptwriteintrin.h>  // __PTWRITE__
#include <invpcidintrin.h>  // __INVPCID__
#include <keylockerintrin.h>
/*   
aes
    __KL__
    __WIDEKL__ 
*/
    || 
#include <amxintrin.h>                  /*
    __AMXBF16__
    __AMXTILE__ 
    __AMXINT8__
*/
#include <avx512vp2intersectintrin.h>   // __AVX512VP2INTERSECT__
#include <enqcmdintrin.h>               // __ENQCMD__
#include <serializeintrin.h>            // __SERIALIZE__
#include <tsxldtrkintrin.h>             // __TSXLDTRK__
#include <avx512vldqintrin.h>           // __AVX512DQ__ //
#include <avx512ifmavlintrin.h>         // __AVX512IFMA__ 
#include <avx512erintrin.h>             // __AVX512ER__
#include <avx512ifmaintrin.h>           // __AVX512IFMA__
#include <avx512vbmiintrin.h>           // __AVX512VBMI__
#include <avx512vbmivlintrin.h>         // __AVX512VBMI__
#include <avx512vbmi2intrin.h>          // __AVX512VBMI2__
#include <avx512vlvbmi2intrin.h>        // __AVX512VBMI2__
#include <avx512pfintrin.h>             // __AVX512PF__
#include <avx512fp16intrin.h>           // __AVX512FP16__
#include <avx512vlfp16intrin.h>         // __AVX512FP16__
#include <avx512vlfp16intrin.h>         // __AVX512VL__
#include <avx512bf16intrin.h>           // __AVX512BF16__
#include <avx512vlbf16intrin.h>         // __AVX512VL__
#include <avx512vlbf16intrin.h>         // __AVX512BF16__
#include <pkuintrin.h>                  // __PKU__
#include <vpclmulqdqintrin.h>           // __VPCLMULQDQ__
#include <vaesintrin.h>                 // __VAES__
#include <gfniintrin.h>                 // __GFNI__
    __RDPID__
    __MOVBE__
#include <rtmintrin.h>                  // __RTM__
#include <xtestintrin.h>          
#include <shaintrin.h>                  // __SHA__
#include <fxsrintrin.h>                 // __FXSR__
#include <mmintrin.h>                   // __MMX__
#include <xmmintrin.h>                  // __SSE__
#include <emmintrin.h>                  /*
__SSE2__

_mm_stream_pi(__m64 *__p, __m64 __a)
_mm_stream_si64(i64 *__p, i64 src)


ISX_X86_SSE
ISX_X86_ 


qia VMOVAPS _mm_store_si128(__m128i *__p, __m128i __b)
qfa VMOVNTPS_mm_stream_pd(double *dst[2], __m128d src)

hiu MOVD    _mm_storeu_si16(*dst, __m128i.d[0] src)

uwi MOVD    _mm_storeu_si32(*d, m128i.w[0] s)
udi MOVQ    _mm_storeu_si64(*d, m128i.h[0] s)

udi MOVLPS  _mm_storel_epi64(mqi *d, mqi s.d[0])

uqi MOVUP   _mm_storeu_si128(__m128i_u *__p, __m128i src))

*/

SRC_PMMINTRIN_H, // #include <pmmintrin.h>  __SSE3__
SPF_X86_SSE
SPF_X86_SSE3
SPF_X86_BMI1

SPF_X86_BMI2 // __BMI2__
// #include <bmi2intrin.h>      

SPF_X86_F16C  //  __F16C__
// #include <f16cintrin.h> 

SPF_X86_AES // __AES__
// #include <wmmintrin.h>
// #include <keylockerintrin.h>
    
SPF_X86_XOP
SPF_X86_FMA     // __FMA__
// #include <fmaintrin.h> 
SPF_X86_FMA3
SPF_X86_FMA4

SPF_X86_AVX    // __AVX__
// #include <avxintrin.h>
SPF_X86_MOVDIRI
#include <movdirintrin.h>  

SPF_X86_MOVDIR64B
/*  #include <movdirintrin.h> 
__MOVDIRI__
x86     _directstoreu_u32(*dst[::8], u64)
x86     _movdir64b(*dst[:64:64], *src[:64])
__MOVDIR64B__
x64     _directstoreu_u64(*dst[::8], u64)
    */
    
#include <tmmintrin.h>              // __SSSE3__
    // _mm_abs_pi8(__m64 __a) // abs(v8qi) => v8qu

#include <smmintrin.h>              // __SSE4_2__ || __SSE4_1__
#include <clflushoptintrin.h>       // __CLFLUSHOPT__
#include <clwbintrin.h>             // __CLWB__
#include <avx2intrin.h>             // __AVX2__

#include <lzcntintrin.h>            // __LZCNT__
#include <popcntintrin.h>           // __POPCNT__
#include <avxvnniintrin.h>          // __AVXVNNI__
#include <avx512fintrin.h>          // __AVX512F__
#include <avx512vlintrin.h>         // __AVX512VL__
#   include <avx512bwintrin.h>         // __AVX512BW__
#   include <avx512bitalgintrin.h>     // __AVX512BITALG__
#   include <avx512vlbitalgintrin.h>    __AVX512BITALG__ 
#   include <avx512cdintrin.h>         // __AVX512CD__
#   include <avx512vpopcntdqintrin.h>  // __AVX512VPOPCNTDQ__
#   include <avx512vpopcntdqvlintrin.h>    // __AVX512VPOPCNTDQ__
#   include <avx512vnniintrin.h>       // __AVX512VNNI__
#   include <avx512vlvnniintrin.h>    __AVX512VNNI__
#   include <avx512dqintrin.h>         // __AVX512DQ__
#   include <avx512vlbwintrin.h> __AVX512BW__ 
#   include <avx512vlcdintrin.h> __AVX512CD__ 
__XOP__         // #include <xopintrin.h>
__TBM__         // #include <tbmintrin.h>
__LWP__         // #include <lwpintrin.h>
__3dNOW__       // #include <mm3dnow.h>
__PRFCHW__      // #include <prfchwintrin.h>
__SSE4A__       // #include <ammintrin.h>
__FMA4__        // #include <fma4intrin.h>
__CLZERO__      // #include <clzerointrin.h>
__MWAITX__      // #include <mwaitxintrin.h>
    defined(__RTM__)
#include <rtmintrin.h> 
#include <xtestintrin.h>
    defined(__SHA__) #include <shaintrin.h>
    defined(__FXSR__) #include <fxsrintrin.h>
    defined(__MMX__) #include <mmintrin.h>
SPF_X86_
    defined(__SSE__) #include <xmmintrin.h>
SPF_X86_
    defined(__SSE2__)#include <emmintrin.h>
SPF_X86_
    defined(__SSE3__)#include <pmmintrin.h>
SPF_X86_
    defined(__SSSE3__) #include <tmmintrin.h>
SPF_X86_
    (defined(__SSE4_2__) || defined(__SSE4_1__))#include <smmintrin.h>
SPF_X86_
    defined(__XSAVEC__)#include <xsavecintrin.h>
    defined(__XSAVES__)#include <xsavesintrin.h>
    defined(__XSAVEOPT__) #include <xsaveoptintrin.h>
SPF_X86_
    defined(__SHSTK__)#include <cetintrin.h>
SPF_X86_
    defined(__RDSEED__)#include <rdseedintrin.h>
    defined(__WBNOINVD__)#include <wbnoinvdintrin.h>
    defined(__CLDEMOTE__)#include <cldemoteintrin.h>
    defined(__WAITPKG__)#include <waitpkgintrin.h>
SPF_X86_
    defined(__MOVDIRI__) ||#include <movdirintrin.h>
    defined(__MOVDIR64B__)#include <movdirintrin.h>
SPF_X86_
    defined(__PCONFIG__)#include <pconfigintrin.h>
    defined(__SGX__)#include <sgxintrin.h>
    defined(__PTWRITE__)#include <ptwriteintrin.h>
    defined(__INVPCID__)#include <invpcidintrin.h>

    defined(__WIDEKL__)#include <keylockerintrin.h>
    defined(__AMXTILE__) || defined(__AMXINT8__) || defined(__AMXBF16__) #include <amxintrin.h>
    defined(__AVX512VP2INTERSECT__)#include <avx512vp2intersectintrin.h>
    defined(__ENQCMD__)#include <enqcmdintrin.h>
    defined(__SERIALIZE__) #include <serializeintrin.h>
    defined(__TSXLDTRK__) #include <tsxldtrkintrin.h>
    (defined(__AVX512VL__) && defined(__AVX512DQ__))#include <avx512vldqintrin.h>
    defined(__AVX512ER__)#include <avx512erintrin.h>
    defined(__AVX512IFMA__)#include <avx512ifmaintrin.h>
    (defined(__AVX512IFMA__) && defined(__AVX512VL__))#include <avx512ifmavlintrin.h>
    defined(__AVX512VBMI__)#include <avx512vbmiintrin.h>
    (defined(__AVX512VBMI__) && defined(__AVX512VL__))#include <avx512vbmivlintrin.h>
    defined(__AVX512VBMI2__)#include <avx512vbmi2intrin.h>
    (defined(__AVX512VBMI2__) && defined(__AVX512VL__)) #include <avx512vlvbmi2intrin.h>
    defined(__AVX512PF__)#include <avx512pfintrin.h>
#if defined(__AVX512FP16__)
#include <avx512fp16intrin.h>
defined(__AVX512FP16__) &&#include <avx512vlfp16intrin.h>
defined(__AVX512VL__)#include <avx512vlfp16intrin.h>
    defined(__AVX512BF16__)#include <avx512bf16intrin.h>
    (defined(__AVX512VL__) #include <avx512vlbf16intrin.h>
    && defined(__AVX512BF16__))#include <avx512vlbf16intrin.h>
    defined(__PKU__) #include <pkuintrin.h>
    defined(__VPCLMULQDQ__) #include <vpclmulqdqintrin.h>
    defined(__VAES__) #include <vaesintrin.h>
    defined(__GFNI__)#include <gfniintrin.h>
    defined(__RDPID__)
    defined(__MOVBE__)

    (defined(__AES__) || defined(__PCLMUL__))#include <wmmintrin.h>
    defined(__CLFLUSHOPT__)#include <clflushoptintrin.h>
    defined(__CLWB__)#include <clwbintrin.h>
    defined(__AVX__)#include <avxintrin.h>
    defined(__AVX2__)#include <avx2intrin.h>
    defined(__F16C__)#include <f16cintrin.h>
    defined(__BMI2__)#include <bmi2intrin.h>
    defined(__LZCNT__)#include <lzcntintrin.h>
    defined(__POPCNT__)#include <popcntintrin.h>
    defined(__FMA__)#include <fmaintrin.h>
    defined(__AVX512F__)#include <avx512fintrin.h>
    defined(__AVX512VL__)#include <avx512vlintrin.h>
    defined(__AVX512BW__)#include <avx512bwintrin.h>
    defined(__AVX512BITALG__)#include <avx512bitalgintrin.h>
    defined(__AVX512CD__)#include <avx512cdintrin.h>
    defined(__AVX512VPOPCNTDQ__)#include <avx512vpopcntdqintrin.h>
    (defined(__AVX512VL__) && defined(__AVX512VPOPCNTDQ__))#include <avx512vpopcntdqvlintrin.h>
    defined(__AVX512VNNI__)#include <avx512vnniintrin.h>
    (defined(__AVX512VL__) && defined(__AVX512VNNI__))#include <avx512vlvnniintrin.h>
    defined(__AVXVNNI__)#include <avxvnniintrin.h>
    defined(__AVX512DQ__)#include <avx512dqintrin.h>
    (defined(__AVX512VL__) && defined(__AVX512BITALG__))#include <avx512vlbitalgintrin.h>
    (defined(__AVX512VL__) && defined(__AVX512BW__))#include <avx512vlbwintrin.h>
    (defined(__AVX512VL__) && defined(__AVX512CD__))#include <avx512vlcdintrin.h>
    
