
/*°′″  «»  ≤≥  ≠≈  —¦  ÷×  !¡  ©®  £€  $¢  №⋕  λμ  πφ  ∑∏  ¶§  †‡  ±∞  √∆  ∫∳ */

#pragma once

#include <uchar.h>

#define UNICODE_MAX 0x10FFFF

enum {
    UTF_8_BTP_NULL, /* 0; these bytes never occur in valid UTF-8 */
    UTF_8_BTP_SING, /* 1; the ASCII characters: [0x000000..0x00007f] */
    UTF_8_BTP_DOUB, /* 2; the first byte of:    [0x000080..0x0007FF] */
    UTF_8_BTP_TRIP, /* 3; the first byte of:    [0x000800..0x00FFFF] */
    UTF_8_BTP_QUAD, /* 4; the first byte of:    [0x00ffff..0x10FFFF] */
    UTF_8_BTP_CONT, /* 5; continuation byte */
};


static
const char *ASCII_REPR[128] = {
    "\\0",   "\\x01", "\\x02", "\\x03",
    "\\x04", "\\x05", "\\x06", "\\a",
    "\\b",   "\\t",   "\\n",   "\\v",
    "\\f",   "\\r",   "\\x0f", "\\x0f",
    "\\x10", "\\x11", "\\x12", "\\x13",
    "\\x14", "\\x15", "\\x16", "\\x17",
    "\\x18", "\\x19", "\\x1a", "\\x1b",
    "\\x1c", "\\x1d", "\\x1e", "\\x1f",
    " ",   "!",   "\\\"","#",   "$",   "%",   "&",   "'",
    "(",   ")",   "*",   "+",   ",",   "-",   ".",   "/",
    "0",   "1",   "2",   "3",   "4",   "5",   "6",   "7",
    "8",   "9",   ":",   ";",   "<",   "=",   ">",   "?",
    "@",   "A",   "B",   "C",   "D",   "E",   "F",   "G",
    "H",   "I",   "J",   "K",   "L",   "M",   "N",   "O",
    "P",   "Q",   "R",   "S",   "T",   "U",   "V",   "W",
    "X",   "Y",   "Z",   "[",   "\\\\","]",   "^",   "_",
    "`",   "a",   "b",   "c",   "d",   "e",   "f",   "g",
    "h",   "i",   "j",   "k",   "l",   "m",   "n",   "o",    
    "p",   "q",   "r",   "s",   "t",   "u",   "v",   "w",
    "x",   "y",   "z",   "{",   "|",   "}",   "~",   "\\x7f",
};

static 
const signed char ASCII_REPR_LEN[128] = {
    2,4,4,4,4,4,4,2,2,2,2,2,2,2,4,4,
    4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
    1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,
};
    
struct UTF_8_DATA {
    char        BTP[256];
    char        CBI[256];
    char32_t    MB1[256];
    char        MB2[64];
    char16_t    MB3[64];
    char32_t    MB4[64];
    char        SB4[16];
    char        SB3[16];
    char        SB2[32];
    char        CBO[64];
};

static
const struct UTF_8_DATA 
UTF_8 = {

    .BTP = {
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
        0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
        4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,
    },
    .CBI = {
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
        0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
        0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,
        0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
        0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,
        0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,
        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,
        0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,   
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    },

    .MB1 = {
        000,001,002,003,004,005,006,007,
        010,011,012,013,014,015,016,017,
        020,021,022,023,024,025,026,027,
        030,031,032,033,034,035,036,037,
        ' ','!','"','#','$','%','&',047,
        '(',')','*','+',',','-','.','/',
        '0','1','2','3','4','5','6','7',
        '8','9',':',';','<','=','>','?',
        '@','A','B','C','D','E','F','G',
        'H','I','J','K','L','M','N','O',
        'P','Q','R','S','T','U','V','W',
        'X','Y','Z','[',0x5c,']','^','_',
        '`','a','b','c','d','e','f','g',
        'h','i','j','k','l','m','n','o',
        'p','q','r','s','t','u','v','w',
        'x','y','z','{','|','}','~',127,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        [0xc2]=0x000080,[0xc3]=0x0000c0,
        [0xc4]=0x000100,[0xc5]=0x000140,
        [0xc6]=0x000180,[0xc7]=0x0001c0,
        [0xc8]=0x000200,[0xc9]=0x000240,
        [0xca]=0x000280,[0xcb]=0x0002c0,
        [0xcc]=0x000300,[0xcd]=0x000340,
        [0xce]=0x000380,[0xcf]=0x0003c0,
        [0xd0]=0x000400,[0xd1]=0x000440,
        [0xd2]=0x000480,[0xd3]=0x0004c0,
        [0xd4]=0x000500,[0xd5]=0x000540,
        [0xd6]=0x000580,[0xd7]=0x0005c0,
        [0xd8]=0x000600,[0xd9]=0x000640,
        [0xda]=0x000680,[0xdb]=0x0006c0,
        [0xdc]=0x000700,[0xdd]=0x000740,
        [0xde]=0x000780,[0xdf]=0x0007c0,
        [0xe0]=0x000000,[0xe1]=0x001000,
        [0xe2]=0x002000,[0xe3]=0x003000,
        [0xe4]=0x004000,[0xe5]=0x005000,
        [0xe6]=0x006000,[0xe7]=0x007000,
        [0xe8]=0x008000,[0xe9]=0x009000,
        [0xea]=0x00a000,[0xeb]=0x00b000,
        [0xec]=0x00c000,[0xed]=0x00d000,
        [0xee]=0x00e000,[0xef]=0x00f000,
        [0xf0]=0x000000,[0xf1]=0x040000,
        [0xf2]=0x080000,[0xf3]=0x0C0000,
        [0xf4]=0x100000,
    },

    .MB2 = {
        0x00, 0x01, 0x02, 0x03,
        0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b,
        0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13,
        0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b,
        0x1c, 0x1d, 0x1e, 0x1f,
        0x20, 0x21, 0x22, 0x23,
        0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2a, 0x2b,
        0x2c, 0x2d, 0x2e, 0x2f,
        0x30, 0x31, 0x32, 0x33,
        0x34, 0x35, 0x36, 0x37,
        0x38, 0x39, 0x3a, 0x3b,
        0x3c, 0x3d, 0x3e, 0x3f,
    },

    .MB3 = {
        0x0000, 0x0040, 0x0080, 0x00c0,
        0x0100, 0x0140, 0x0180, 0x01c0,
        0x0200, 0x0240, 0x0280, 0x02c0,
        0x0300, 0x0340, 0x0380, 0x03c0,
        0x0400, 0x0440, 0x0480, 0x04c0,
        0x0500, 0x0540, 0x0580, 0x05c0,
        0x0600, 0x0640, 0x0680, 0x06c0,
        0x0700, 0x0740, 0x0780, 0x07c0,
        0x0800, 0x0840, 0x0880, 0x08c0,
        0x0900, 0x0940, 0x0980, 0x09c0,
        0x0a00, 0x0a40, 0x0a80, 0x0ac0,
        0x0b00, 0x0b40, 0x0b80, 0x0bc0,
        0x0c00, 0x0c40, 0x0c80, 0x0cc0,
        0x0d00, 0x0d40, 0x0d80, 0x0dc0,
        0x0e00, 0x0e40, 0x0e80, 0x0ec0,
        0x0f00, 0x0f40, 0x0f80, 0x0fc0,
    },

    .MB4 = {
        0x000000, 0x001000, 0x002000, 0x003000,
        0x004000, 0x005000, 0x006000, 0x007000,
        0x008000, 0x009000, 0x00a000, 0x00b000,
        0x00c000, 0x00d000, 0x00e000, 0x00f000,
        0x010000, 0x011000, 0x012000, 0x013000,
        0x014000, 0x015000, 0x016000, 0x017000,
        0x018000, 0x019000, 0x01a000, 0x01b000,
        0x01c000, 0x01d000, 0x01e000, 0x01f000,
        0x020000, 0x021000, 0x022000, 0x023000,
        0x024000, 0x025000, 0x026000, 0x027000,
        0x028000, 0x029000, 0x02a000, 0x02b000,
        0x02c000, 0x02d000, 0x02e000, 0x02f000,
        0x030000, 0x031000, 0x032000, 0x033000,
        0x034000, 0x035000, 0x036000, 0x037000,
        0x038000, 0x039000, 0x03a000, 0x03b000,
        0x03c000, 0x03d000, 0x03e000, 0x03f000,
    },
    
    .SB4 = {
        0xf0,0xf1,0xf2,0xf3,0xf4,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    },
    
    .SB3 = {
        0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,
        0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,
    },
    
    .SB2 = {
        0x00,0x00,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,
        0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,
        0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,
        0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xde,0xdf,
    },
    .CBO = {
        0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,
        0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,
        0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,
        0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,
        0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,
        0xa8,0xa9,0xaa,0xab,0xac,0xad,0xae,0xaf,
        0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,
        0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,
    },
    
};

static inline char32_t
UTF_8_DECODE(const char src[restrict], ptrdiff_t *restrict pos) {
    ptrdiff_t       i = *pos;
    ptrdiff_t       c = src[i];
    const ptrdiff_t t = UTF_8.BTP[c];
    ptrdiff_t       b = src[i++];
    char32_t        v = UTF_8.MB1[b];
    switch (t) {
        case UTF_8_BTP_QUAD: {
            b = src[i++];
            c = UTF_8.CBI[b];
            if (c == 0xFF) {
                break;
            }
            v = UTF_8.MB4[c];
        }
        case UTF_8_BTP_TRIP: {
            b = src[i++];
            c = UTF_8.CBI[b];
            if (c == 0xFF) {
                break;
            }
            v += UTF_8.MB3[(ptrdiff_t) c];
        }
        case UTF_8_BTP_DOUB: {
            b = src[i++];
            c = UTF_8.CBI[b];
            if (c == 0xFF) {
                break;
            }
            v += UTF_8.MB2[c];
        }
        case UTF_8_BTP_SING: {
            *pos = i;
            return v;
        }
    }
    errno = EILSEQ;
    return (char32_t) WEOF;
}

static inline ptrdiff_t
UTF_8_ENCODE(char32_t src, char dst[restrict]) {
    const uint32_t c = (unsigned) src;
    if (src > 0x7F) {
        if (src > 0x7FF) {
            if (src > 0xFFFF) {
                if (src > UNICODE_MAX) {
                    errno = EILSEQ;
                    return 0;
                }
                dst[0]  = UTF_8.SB4[017&(c>>18)];
                dst[1]  = UTF_8.CBO[077&(c>>12)];
                dst[2]  = UTF_8.CBO[077&(c>> 6)];
                dst[3]  = UTF_8.CBO[077&(c)];
                return 4;
            }
            dst[0]      = UTF_8.SB3[017&(c>>12)];
            dst[1]      = UTF_8.CBO[077&(c>> 6)];
            dst[2]      = UTF_8.CBO[077&(c)];
            return 3;
        }
        dst[0]          = UTF_8.SB2[037&(c>>6)];
        dst[1]          = UTF_8.CBO[077&(c)];
        return 2;
    }
    dst[0] = (char) c;
    return 1;
    
}

static inline ptrdiff_t
UNICODE_ESC_32F(char32_t src, FILE *restrict dst) {
    return fprintf(dst, "\\U%08X", (unsigned) src);
}

static inline ptrdiff_t
UNICODE_ESC_16F(char16_t src, FILE *restrict dst) {
    return fprintf(dst, "\\u%04X", (unsigned) src);
}

static inline ptrdiff_t
UNICODE_ESC_8F(char      src, FILE *restrict dst) {
    return fprintf(dst, "\\x%02X", (unsigned) src);
}

static inline ptrdiff_t
UNICODE_ESC_32S(char32_t src, char *restrict dst) {
    return snprintf(dst, 16, "\\U%08X", (unsigned) src);
}

static inline ptrdiff_t
UNICODE_ESC_16S(char16_t src, char *restrict dst) {
    return snprintf(dst, 16, "\\u%04X", (unsigned) src);
}

static inline ptrdiff_t
UNICODE_ESC_8S(char src, char *restrict dst) {
    return snprintf(dst, 16, "\\x%02X", (unsigned) src);
}

static inline ptrdiff_t
UTF_8_REPRS(const char src[restrict], char dst[restrict]) {
    ptrdiff_t off = 0; /* src offset */
    ptrdiff_t pos = 1; /* dst offset */
    *dst = '"';
    int safe = 0;
    while (1) {
        assert(safe++ < 1024);
        const wint_t chr = (wint_t) UTF_8_DECODE(src, &off);
        if (chr == WEOF) {
            fail: {
                return PTRDIFF_C(0)-1;
            }
        }
        if (chr == 0x00) {
            dst[pos++] = '"';
            dst[pos] = 0;
            return pos;
        }
        if (chr > 0x7F) {
            if (chr > 0xFFFF) {
                pos += UNICODE_ESC_32S((char32_t) chr, dst+pos);
            }
            else {
                pos += UNICODE_ESC_16S((char16_t) chr, dst+pos);
            }
        }
        else {
            const char *seq = ASCII_REPR[chr];
            while (*seq) {
                dst[pos++] = *seq++;
            }
        }
    }
}

